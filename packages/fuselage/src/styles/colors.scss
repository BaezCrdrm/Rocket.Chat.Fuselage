@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use '~@rocket.chat/fuselage-tokens/colors.scss';
@use './theme.scss';

$-map-type-to-prefix: (
  neutral: 'n',
  primary: 'b',
  info: 'b',
  success: 'g',
  warning: 'y',
  danger: 'r',
);

@function _get-palette-color($type, $grade, $alpha) {
  @if not ($grade % 100 == 0 and $grade / 100 >= 1 and $grade / 100 <= 9) {
    @error 'invalid color grade';
  }

  @if not ($alpha == null or ($alpha >= 0 and $alpha <= 1)) {
    @error 'invalid color alpha';
  }

  $prefix: map.get($-map-type-to-prefix, $type);
  @if not $prefix {
    @error 'invalid color type';
  }

  $base-color: map.get(colors.$light, #{ $prefix }#{ $grade });

  @if not $base-color {
    @error 'invalid color reference';
  }

  @if ($alpha != null) {
    @return (
      --rcx-color-#{ $type }-#{ $grade }-#{ $alpha * 100 },
      color.change($base-color, $alpha: $alpha),
    );
  }

  @return (--rcx-color-#{ $type }-#{ $grade }, $base-color);
}

@function neutral($grade, $alpha: null) {
  $pair: _get-palette-color(neutral, $grade, $alpha);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

@function primary($grade, $alpha: null) {
  $pair: _get-palette-color(primary, $grade, $alpha);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

@function info($grade, $alpha: null) {
  $pair: _get-palette-color(info, $grade, $alpha);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

@function success($grade, $alpha: null) {
  $pair: _get-palette-color(success, $grade, $alpha);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

@function warning($grade, $alpha: null) {
  $pair: _get-palette-color(warning, $grade, $alpha);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

@function danger($grade, $alpha: null) {
  $pair: _get-palette-color(danger, $grade, $alpha);
  @return var(list.nth($pair, 1), list.nth($pair, 2));
}

$all: (
  light: (
    surface: #ffffff,
    default: map.get(colors.$light, 'n800'),
    info: map.get(colors.$light, 'n700'),
    hint: map.get(colors.$light, 'n600'),
    disabled: map.get(colors.$light, 'n400'),
    alternative: #ffffff,
    primary: map.get(colors.$light, 'b500'),
    success: map.get(colors.$light, 'g500'),
    danger: map.get(colors.$light, 'r500'),
    warning: map.get(colors.$light, 'y700'),
    link: map.get(colors.$light, 'b500'),
    visited-link: map.get(colors.$light, 'p500'),
    active-link: map.get(colors.$light, 'r500'),
  ),
  dark: (
    surface: map.get(colors.$dark, 'n900'),
    default: map.get(colors.$dark, 'n100'),
    info: map.get(colors.$light, 'n700'),
    hint: map.get(colors.$light, 'n600'),
    disabled: map.get(colors.$light, 'n400'),
    alternative: #ffffff,
    primary: map.get(colors.$light, 'b500'),
    success: map.get(colors.$light, 'g500'),
    danger: map.get(colors.$light, 'r500'),
    warning: map.get(colors.$light, 'y700'),
    link: map.get(colors.$light, 'b500'),
    visited-link: map.get(colors.$light, 'p500'),
    active-link: map.get(colors.$light, 'r500'),
  ),
);

@function surface() {
  $color: map.get(map.get($all, theme.$current-theme), 'surface');
  @return var(--rcx-color-surface, $color);
}

@function foreground($type) {
  $color: map.get(map.get($all, theme.$current-theme), $type);
  @return var(--rcx-color-#{ $type }, $color);
}
